#!/usr/bin/env ruby
#
# Copyright (C) 2013 Conjur Inc
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

require 'json'
require 'methadone'

class JsonField
  include Methadone::Main
  include Methadone::CLILogging

  description "parse JSON and extract a field value"
  arg :json_path, "path to object to extract, eg. 'headers.0' or 'document.author.name'"
  arg :json, :optional, "data to parse (reads from stdin if not given)"

  main do |path, input = nil|
    input ||= STDIN.read
    data = JSON.parse input
    result = data.extract_field *(path.split '.', -1)
    puts result
  end
end

class Hash
  def extract_field head = nil, *tail
    return self unless head
    field_not_found! head unless has_key? head
    self[head].extract_field *tail
  end
end

class Array
  def extract_field head = nil, *tail
    return self unless head
    index = Integer(head) rescue field_not_found!(head)
    field_not_found! index if index >= size
    self[index].extract_field *tail
  end
end

class Object
  def extract_field head = nil, *tail
    field_not_found! head if head
    self
  end

  def field_not_found! field
    raise Methadone::Error.new(2, "No field #{field} in #{inspect}")
  end
end

JsonField.go!
